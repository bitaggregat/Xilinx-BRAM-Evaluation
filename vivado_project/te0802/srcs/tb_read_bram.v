`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 03/24/2025 12:20:51 PM
// Design Name: 
// Module Name: tb_read_bram
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module tb_read_bram(

    );
    
    localparam T=2;
    localparam TICKS_PER_BIT = 4;
    localparam TICKS_PER_BIT_SIZE = $clog2(TICKS_PER_BIT+1);
    
    
    reg clk;
    
    integer i, j;
    reg [255:0] expected_raw [0:127];
    reg [31:0] expected_bram [0:1023];
    reg [3:0] expected_par [0:1023];
    reg [3:0] crc;
    
    wire uart_rx;
    reg to_dut_start;
    reg [7:0] to_dut_data;
    wire to_dut_done;
    
    wire uart_tx;
    wire [7:0] from_dut_data;
    wire from_dut_done;
    
    wire [7:0] led;
    
    
    read_bram
    #(
        .TICKS_PER_BIT(TICKS_PER_BIT)
    ) dut (
        .clk_i(clk),
        .uart_rx_i(uart_rx),
        .uart_tx_o(uart_tx),
        .led_o(led)
    );
    
    uart_tx 
	#(
        .TICKS_PER_BIT(TICKS_PER_BIT),
        .TICKS_PER_BIT_SIZE(TICKS_PER_BIT_SIZE)
    ) uart_to_dut (
        .i_clk(clk),
        .i_start(to_dut_start),
        .i_data(to_dut_data),
        .o_done(to_dut_done),
        .o_dout(uart_rx)     
    );
    
    uart_rx
	#(
        .TICKS_PER_BIT(TICKS_PER_BIT),
        .TICKS_PER_BIT_SIZE(TICKS_PER_BIT_SIZE)
    ) uart_from_dut (
        .i_clk(clk),
        .i_enable(1'b1),
        .i_din(uart_tx),
        .o_rxdata(from_dut_data),
        .o_recvdata(from_dut_done)
    );
    

    always
    begin
        clk = 1'b1;
        #(T/2);
        clk = 1'b0;
        #(T/2);
    end
    
    task recv_timeout(input [7:0] expected);
    begin
        fork: r_timeout
        begin
            wait(from_dut_done == 1'b1);
            @(negedge from_dut_done);
            if (from_dut_data == expected)
                //$display("PASSED: received 0x%x", expected);
                ;
            else
                $display("ERROR: wrong value received 0x%x != 0x%x", from_dut_data, expected);
            disable r_timeout;
        end
        begin
            #(16*T*TICKS_PER_BIT) $display("ERROR: timeout for transmission of value 0x%x", expected);
            $finish;
        end
        join
    end
    endtask
    
    
    // generated by https://bues.ch/cms/hacking/crcgen
    function automatic [3:0] crc_func;
        input [3:0] crc_prev;
        input [35:0] data;
    begin
        crc_func[0] = crc_prev[1] ^ data[1] ^ data[5] ^ data[6] ^ data[8] ^ data[12] ^ data[13] ^ data[15] ^ data[19] ^ data[20] ^ data[22] ^ data[26] ^ data[27] ^ data[29] ^ data[33] ^ data[34];
        crc_func[1] = crc_prev[0] ^ crc_prev[2] ^ data[0] ^ data[2] ^ data[6] ^ data[7] ^ data[9] ^ data[13] ^ data[14] ^ data[16] ^ data[20] ^ data[21] ^ data[23] ^ data[27] ^ data[28] ^ data[30] ^ data[34] ^ data[35];
        crc_func[2] = crc_prev[0] ^ crc_prev[3] ^ data[0] ^ data[3] ^ data[5] ^ data[6] ^ data[7] ^ data[10] ^ data[12] ^ data[13] ^ data[14] ^ data[17] ^ data[19] ^ data[20] ^ data[21] ^ data[24] ^ data[26] ^ data[27] ^ data[28] ^ data[31] ^ data[33] ^ data[34] ^ data[35];
        crc_func[3] = crc_prev[0] ^ data[0] ^ data[4] ^ data[5] ^ data[7] ^ data[11] ^ data[12] ^ data[14] ^ data[18] ^ data[19] ^ data[21] ^ data[25] ^ data[26] ^ data[28] ^ data[32] ^ data[33] ^ data[35];
    end
    endfunction
    
    initial
    begin
        // read expected data
        $readmemh("data.mem", expected_raw);
        for(i=0; i<128; i=i+1)
        begin
            expected_bram[i*8] = expected_raw[i][31:0];
            expected_bram[i*8+1] = expected_raw[i][63:32];
            expected_bram[i*8+2] = expected_raw[i][95:64];
            expected_bram[i*8+3] = expected_raw[i][127:96];
            expected_bram[i*8+4] = expected_raw[i][159:128];
            expected_bram[i*8+5] = expected_raw[i][191:160];
            expected_bram[i*8+6] = expected_raw[i][223:192];
            expected_bram[i*8+7] = expected_raw[i][255:224];
        end
        
        for(i=0; i<16; i=i+1)
        begin
            for(j=0; j<64; j=j+1)
            begin
                expected_par[i*64+j] = expected_raw[i] >> 4*j;
            end
        end
        
        // send u
        to_dut_data = 8'h40;
        @(negedge clk);
        to_dut_start = 1'b1;
        @(negedge clk);
        to_dut_start = 1'b0;
        @(posedge to_dut_done);
        
        // nothing should happen
        fork: wait_nothing
        begin
            wait(uart_tx == 1'b0);
            $display("ERROR: unknown command triggered submission");
            $finish;
        end
        begin
            #(14*T*TICKS_PER_BIT);
            disable wait_nothing;
        end
        join
        
        // send s
        to_dut_data = 8'h73;
        @(negedge clk);
        to_dut_start = 1'b1;
        @(negedge clk);
        to_dut_start = 1'b0;
        @(posedge to_dut_done);
        
        // receive
        crc = 4'h0;
        for(i=0; i<1024; i=i+1)
        begin
            //$display("%d", i);
            crc = crc_func(crc, {expected_par[i], expected_bram[i]});
            recv_timeout(expected_bram[i][7:0]);
            recv_timeout(expected_bram[i][15:8]);
            recv_timeout(expected_bram[i][23:16]);
            recv_timeout(expected_bram[i][31:24]);
            recv_timeout({crc, expected_par[i]});
        end
        
        @(negedge clk);
        @(negedge clk);
        $finish;
    end


endmodule
