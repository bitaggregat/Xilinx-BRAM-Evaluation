`timescale 1ns / 1ps

module bram_read_test(
    input clka,
    input [9:0] addra,
    output [17:0] douta
    );
    
    wire [15:0] data;
    wire [1:0] parity;
    
    assign douta = {parity, data};
    
RAMB18E2 #(
// CASCADE_ORDER_A, CASCADE_ORDER_B: "FIRST", "MIDDLE", "LAST", "NONE"
.CASCADE_ORDER_A("NONE"),
.CASCADE_ORDER_B("NONE"),
// CLOCK_DOMAINS: "COMMON", "INDEPENDENT"
.CLOCK_DOMAINS("INDEPENDENT"),
// Collision check: "ALL", "GENERATE_X_ONLY", "NONE", "WARNING_ONLY"
.SIM_COLLISION_CHECK("ALL"),
// DOA_REG, DOB_REG: Optional output register (0, 1)
.DOA_REG(0),
.DOB_REG(0),
// ENADDRENA/ENADDRENB: Address enable pin enable, "TRUE", "FALSE"
.ENADDRENA("FALSE"),
.ENADDRENB("FALSE"),

   // INITP_00 to INITP_0F: Initial contents of the parity memory array
	.INITP_00(256'h646174636173736f72636164696361746e756f63636174756f6261656c626161),
	.INITP_01(256'h746661746e656d657369747265766461746e656d7473756a64616e6f69746964),
	.INITP_02(256'h6d6c616c6c61726961746e656d656572676174736e696167616e696167617265),
	.INITP_03(256'h61656c676e61646e61746e656d6573756d61746e756f6d61676e6f6d6174736f),
	.INITP_04(256'h61737574617261707061796e61746e61726577736e616c616d696e617972676e),
	.INITP_05(256'h61796d72616d7261746e656d75677261686372616c61766f72707061656c7070),
	.INITP_06(256'h727474616e6f69746e6574746174706d657474616b6361747461746173617472),
	.INITP_07(256'h0a420a656b617761636974616d6f747561797469726f687475616e6f69746361),
   // INIT_00 to INIT_7F: Initial contents of the data memory array
	.INIT_00(256'h646174636173736f72636164696361746e756f63636174756f6261656c626161),
	.INIT_01(256'h746661746e656d657369747265766461746e656d7473756a64616e6f69746964),
	.INIT_02(256'h6d6c616c6c61726961746e656d656572676174736e696167616e696167617265),
	.INIT_03(256'h61656c676e61646e61746e656d6573756d61746e756f6d61676e6f6d6174736f),
	.INIT_04(256'h61737574617261707061796e61746e61726577736e616c616d696e617972676e),
	.INIT_05(256'h61796d72616d7261746e656d75677261686372616c61766f72707061656c7070),
	.INIT_06(256'h727474616e6f69746e6574746174706d657474616b6361747461746173617472),
	.INIT_07(256'h0a420a656b617761636974616d6f747561797469726f687475616e6f69746361),
	.INIT_08(256'h736162646e61626c6c616265636e616c61626761626461626b63616279626162),
	.INIT_09(256'h75616365626c756669747561656265626874616274656b7361626e6973616265),
	.INIT_0A(256'h6c6c65626665696c6562726f69766168656265726f6665626565626465626573),
	.INIT_0B(256'h657469627469626874726962647269626e6565777465627972726562746e6562),
	.INIT_0C(256'h616f6265756c62776f6c62646f6f6c626564616c626b63616c62726574746962),
	.INIT_0D(256'h746f62746f6f626b6f6f62656e6f62676e696c696f6279646f6274616f626472),
	.INIT_0E(256'h7262737361726268636e617262656b6172626e69617262796f62786f62656c74),
	.INIT_0F(256'h6e656b6f72627468676972626567646972626b63697262687461657262646165),
	.INIT_10(256'h62676e69646c69756274656b63756268737572626e776f7262726568746f7262),
	.INIT_11(256'h7475627265747475627475627373656e6973756274737275626e727562626c75),
	.INIT_12(256'h65726163647261637361766e61636172656d6163656b61630a430a79626e6f74),
	.INIT_13(256'h6e696168636e6961747265636573756163746163747261636567616972726163),
	.INIT_14(256'h6d656863657365656863706165686365676e61686365636e6168636b6c616863),
	.INIT_15(256'h6c63656c637269636863727568636e696863666569686374736568636c616369),
	.INIT_16(256'h6374616f636c616f6364756f6c6368746f6c636b636f6c637261656c636e6165),
	.INIT_17(256'h6d6f6374726f666d6f63656d6f63626d6f63726f6c6f6372616c6c6f63646c6f),
	.INIT_18(256'h6d6f636e6f73697261706d6f63796e61706d6f636e6f6d6d6f6365657474696d),
	.INIT_19(256'h6e6f697469646e6f6378656c706d6f636574656c706d6f636e6f697469746570),
	.INIT_1A(256'h6f636b6f6f636c6f72746e6f6373756f6963736e6f636e6f697463656e6e6f63),
	.INIT_1B(256'h746e756f636867756f636e6f74746f636b726f6364726f6379706f6372657070),
	.INIT_1C(256'h636c65757263656d6972637469646572636b63617263776f637265766f637972),
	.INIT_1D(256'h73756365767275636e696174727563746e657272756370756379726368737572),
	.INIT_1E(256'h7468677561646b7261647265676e61646567616d61640a440a7475636e6f6968),
	.INIT_1F(256'h65646e6f69736963656474626564687461656472616564646165647961647265),
	.INIT_20(256'h646e6769736564746e65646e6570656465746163696c65646565726765647065),
	.INIT_21(256'h6e656d706f6c657665646c69617465646e6f6974637572747365646572697365),
	.INIT_22(256'h747269646e6f697463657269646e6f69747365676964746e6572656666696474),
	.INIT_23(256'h7567736964657361657369646e6f6973737563736964797265766f6373696479),
	.INIT_24(256'h6f646e6f6973697669646e6f6974756269727473696465636e61747369647473),
	.INIT_25(256'h73736572647265776172646e696172646e776f647462756f64726f6f64676f64),
	.INIT_26(256'h7261657261650a450a74737564797264706f7264676e69766972646b6e697264),
	.INIT_27(256'h67657463656666656e6f6974616375646565676465747361656874726165796c),
	.INIT_28(256'h656867756f6e65656e69676e65646e656369727463656c6563697473616c6567),
	.INIT_29(256'h706d617865797265766572657665746e6576656e657665726f7272656c617571),
	.INIT_2A(256'h657078656e6f69736e6170786565636e65747369786565676e6168637865656c),
	.INIT_2B(256'h61666c6c616674636166656361660a460a65796574726570786565636e656972),
	.INIT_2C(256'h616566726165667265687461667461666d726166726166796c696d616665736c),
	.INIT_2D(256'h6966656c6974726566656c616d6566676e696c656566656c6265656672656874),
	.INIT_2E(256'h69667473726966657269667265676e69667468676966646c6569666e6f697463),
	.INIT_2F(256'h66726f6f6c66746867696c6674616c66656d616c6667616c6664657869666873),
	.INIT_30(256'h6f66726f66746f6f666873696c6f6f66646f6f66646c6f66796c667265776f6c),
	.INIT_31(256'h6665657266656d6172666c776f6664726177726f666d726f666b726f66656372),
	.INIT_32(256'h666c6c75667469757266746e6f72666d6f7266646e65697266746e6575716572),
	.INIT_33(256'h657669676c7269677465676c6172656e65676e65647261670a470a6572757475),
	.INIT_34(256'h656d6e7265766f67646f6f67646c6f6774616f676f6765766f6c677373616c67),
	.INIT_35(256'h7267706972676e6565726774616572677961726773736172676e69617267746e),
	.INIT_36(256'h616872656d6d6168726961680a480a6e756765646975676874776f726770756f),
	.INIT_37(256'h68796e6f6d72616864726168726f627261687970706168676e69676e6168646e),
	.INIT_38(256'h6568676e69726165687968746c61656864616568656865766168657461687461),
	.INIT_39(256'h6f68656c6f6879726f747369686867696865726568706c656874616568747261),
	.INIT_3A(256'h756f686c61746970736f686573726f686e726f6865706f686b6f6f68776f6c6c),
	.INIT_3B(256'h6d696c6c69666961656469656369490a490a726f6d7568776f686573756f6872),
	.INIT_3C(256'h7972747375646e696573616572636e696e6965736c75706d69746e6174726f70),
	.INIT_3D(256'h65746e6965636e617275736e69746e656d757274736e69746365736e696b6e69),
	.INIT_3E(256'h6a796c6c656a0a4a0a646e616c73696e6f72696e6f69746e65766e6974736572),
	.INIT_3F(256'h6b7065656b0a4b0a706d756a656764756a79656e72756f6a6e696f6a6c657765),
   // INIT_A, INIT_B: Initial values on output ports
.INIT_A(18'h000000000),
.INIT_B(18'h000000000),
// Initialization File: RAM initialization file
.INIT_FILE("NONE"),
// Programmable Inversion Attributes: Specifies the use of the built-in programmable inversion
.IS_CLKARDCLK_INVERTED(1'b0),
.IS_CLKBWRCLK_INVERTED(1'b0),
.IS_ENARDEN_INVERTED(1'b0),
.IS_ENBWREN_INVERTED(1'b0),
.IS_RSTRAMARSTRAM_INVERTED(1'b0),
.IS_RSTRAMB_INVERTED(1'b0),
.IS_RSTREGARSTREG_INVERTED(1'b0),
.IS_RSTREGB_INVERTED(1'b0),
// RDADDRCHANGE: Disable memory access when output value does not change ("TRUE", "FALSE")
.RDADDRCHANGEA("FALSE"),
.RDADDRCHANGEB("FALSE"),
// READ_WIDTH_A/B, WRITE_WIDTH_A/B: Read/write width per port
.READ_WIDTH_A(18), // 0-9
.READ_WIDTH_B(0), // 0-9
.WRITE_WIDTH_A(0), // 0-9
.WRITE_WIDTH_B(0), // 0-9
// RSTREG_PRIORITY_A, RSTREG_PRIORITY_B: Reset or enable priority ("RSTREG", "REGCE")
.RSTREG_PRIORITY_A("RSTREG"),
.RSTREG_PRIORITY_B("RSTREG"),
// SRVAL_A, SRVAL_B: Set/reset value for output
.SRVAL_A(18'h000000000),
.SRVAL_B(18'h000000000),
// Sleep Async: Sleep function asynchronous or synchronous ("TRUE", "FALSE")
.SLEEP_ASYNC("FALSE"),
// WriteMode: "WRITE_FIRST", "NO_CHANGE", "READ_FIRST"
.WRITE_MODE_A("READ_FIRST"),
.WRITE_MODE_B("READ_FIRST")
)
RAMB36E2_inst (
// Cascade Signals outputs: Multi-BRAM cascade signals
//.CASDOUTA(CASDOUTA), // 32-bit output: Port A cascade output data
//.CASDOUTB(CASDOUTB), // 32-bit output: Port B cascade output data
//.CASDOUTPA(CASDOUTPA), // 4-bit output: Port A cascade output parity data
//.CASDOUTPB(CASDOUTPB), // 4-bit output: Port B cascade output parity data
//.CASOUTDBITERR(CASOUTDBITERR), // 1-bit output: DBITERR cascade output
//.CASOUTSBITERR(CASOUTSBITERR), // 1-bit output: SBITERR cascade output
// ECC Signals outputs: Error Correction Circuitry ports
//.DBITERR(DBITERR), // 1-bit output: Double bit error status
//.ECCPARITY(ECCPARITY), // 8-bit output: Generated error correction parity
//.RDADDRECC(RDADDRECC), // 9-bit output: ECC Read Address
//.SBITERR(SBITERR), // 1-bit output: Single bit error status
// Port A Data outputs: Port A data
.DOUTADOUT(data), // 32-bit output: Port A Data/LSB data
.DOUTPADOUTP(parity), // 4-bit output: Port A parity/LSB parity
// Port B Data outputs: Port B data
//.DOUTBDOUT(DOUTBDOUT), // 32-bit output: Port B data/MSB data
//.DOUTPBDOUTP(DOUTPBDOUTP), // 4-bit output: Port B parity/MSB parity
// Cascade Signals inputs: Multi-BRAM cascade signals
//.CASDIMUXA(CASDIMUXA), // 1-bit input: Port A input data (0=DINA, 1=CASDINA)
//.CASDIMUXB(CASDIMUXB), // 1-bit input: Port B input data (0=DINB, 1=CASDINB)
//.CASDINA(CASDINA), // 32-bit input: Port A cascade input data
//.CASDINB(CASDINB), // 32-bit input: Port B cascade input data
//.CASDINPA(CASDINPA), // 4-bit input: Port A cascade input parity data
//.CASDINPB(CASDINPB), // 4-bit input: Port B cascade input parity data
//.CASDOMUXA(CASDOMUXA), // 1-bit input: Port A unregistered data (0=BRAM data, 1=CASDINA)
//.CASDOMUXB(CASDOMUXB), // 1-bit input: Port B unregistered data (0=BRAM data, 1=CASDINB)
//.CASDOMUXEN_A(CASDOMUXEN_A), // 1-bit input: Port A unregistered output data enable
//.CASDOMUXEN_B(CASDOMUXEN_B), // 1-bit input: Port B unregistered output data enable
//.CASINDBITERR(CASINDBITERR), // 1-bit input: DBITERR cascade input
//.CASINSBITERR(CASINSBITERR), // 1-bit input: SBITERR cascade input
//.CASOREGIMUXA(CASOREGIMUXA), // 1-bit input: Port A registered data (0=BRAM data, 1=CASDINA)
//.CASOREGIMUXB(CASOREGIMUXB), // 1-bit input: Port B registered data (0=BRAM data, 1=CASDINB)
//.CASOREGIMUXEN_A(CASOREGIMUXEN_A), // 1-bit input: Port A registered output data enable
//.CASOREGIMUXEN_B(CASOREGIMUXEN_B), // 1-bit input: Port B registered output data enable
// ECC Signals inputs: Error Correction Circuitry ports
//.ECCPIPECE(ECCPIPECE), // 1-bit input: ECC Pipeline Register Enable
//.INJECTDBITERR(INJECTDBITERR), // 1-bit input: Inject a double-bit error
//.INJECTSBITERR(INJECTSBITERR),
// Port A Address/Control Signals inputs: Port A address and control signals
.ADDRARDADDR({addra[9:0], 4'b0}), // 14-bit input: A/Read port address
//.ADDRENA(1'b1), // 1-bit input: Active-High A/Read port address enable
.CLKARDCLK(clka), // 1-bit input: A/Read port clock
.ENARDEN(1'b1), // 1-bit input: Port A enable/Read enable
//.REGCEAREGCE(REGCEAREGCE), // 1-bit input: Port A register enable/Register enable
//.RSTRAMARSTRAM(RSTRAMARSTRAM), // 1-bit input: Port A set/reset
//.RSTREGARSTREG(RSTREGARSTREG), // 1-bit input: Port A register set/reset
//.SLEEP(SLEEP), // 1-bit input: Sleep Mode
.WEA(4'b0) // 4-bit input: Port A write enable
// Port A Data inputs: Port A data
//.DINADIN(DINADIN), // 32-bit input: Port A data/LSB data
//.DINPADINP(DINPADINP), // 4-bit input: Port A parity/LSB parity
// Port B Address/Control Signals inputs: Port B address and control signals
//.ADDRBWRADDR(ADDRBWRADDR), // 15-bit input: B/Write port address
//.ADDRENB(ADDRENB), // 1-bit input: Active-High B/Write port address enable
//.CLKBWRCLK(CLKBWRCLK), // 1-bit input: B/Write port clock
//.ENBWREN(ENBWREN), // 1-bit input: Port B enable/Write enable
//.REGCEB(REGCEB), // 1-bit input: Port B register enable
//.RSTRAMB(RSTRAMB), // 1-bit input: Port B set/reset
//.RSTREGB(RSTREGB), // 1-bit input: Port B register set/reset
//.WEBWE(WEBWE), // 8-bit input: Port B write enable/Write enable
// Port B Data inputs: Port B data
//.DINBDIN(DINBDIN), // 32-bit input: Port B data/MSB data
//.DINPBDINP(DINPBDINP) // 4-bit input: Port B parity/MSB parity
);
    
endmodule
